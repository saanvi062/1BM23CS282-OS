#include <stdio.h>
#include <stdbool.h>

#define P 5 
#define R 3

int need[P][R];
int allocation[P][R];
int max[P][R];
int available[R];

void calculateNeed() {
    for (int i = 0; i < P; i++)
        for (int j = 0; j < R; j++)
            need[i][j] = max[i][j] - allocation[i][j];
}

bool isSafe() {
    int work[R];
    bool finish[P] = {false};

    for (int i = 0; i < R; i++)
        work[i] = available[i];

    int count = 0;
    while (count < P) {
        bool found = false;
        for (int p = 0; p < P; p++) {
            if (!finish[p]) {
                int j;
                for (j = 0; j < R; j++)
                    if (need[p][j] > work[j])
                        break;

                if (j == R) {
                    for (int k = 0; k < R; k++)
                        work[k] += allocation[p][k];
                    finish[p] = true;
                    found = true;
                    count++;
                }
            }
        }

        if (!found) {
            printf("System is NOT in a safe state.\n");
            return false;
        }
    }

    printf("System is in a safe state.\n");
    return true;
}

int main() {

    int example_allocation[P][R] = {
        {0, 1, 0},
        {2, 0, 0},
        {3, 0, 2},
        {2, 1, 1},
        {0, 0, 2}
    };

    int example_max[P][R] = {
        {7, 5, 3},
        {3, 2, 2},
        {9, 0, 2},
        {2, 2, 2},
        {4, 3, 3}
    };

    int example_available[R] = {3, 3, 2};

   
    for (int i = 0; i < P; i++)
        for (int j = 0; j < R; j++) {
            allocation[i][j] = example_allocation[i][j];
            max[i][j] = example_max[i][j];
        }

    for (int i = 0; i < R; i++)
        available[i] = example_available[i];

    calculateNeed();
    isSafe();

    return 0;
}

output
System is in a safe state.

Process returned 0 (0x0)   execution time : 0.000 s
Press any key to continue.
